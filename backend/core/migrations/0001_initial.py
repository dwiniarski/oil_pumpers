# Generated by Django 2.2.4 on 2019-10-30 08:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('cash_total', models.IntegerField(default=30000000)),
                ('activation_token', models.CharField(max_length=32, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OilFieldStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'core_oil_field_status',
            },
        ),
        migrations.CreateModel(
            name='OilField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, null=True)),
                ('required_drilling_depth', models.IntegerField()),
                ('volume_starting', models.IntegerField()),
                ('volume_left', models.IntegerField()),
                ('selling_price', models.IntegerField(default=0)),
                ('is_for_sale', models.BooleanField(default=True)),
                ('amount_drills', models.IntegerField(default=0)),
                ('amount_pipes', models.IntegerField(default=0)),
                ('amount_wagons', models.IntegerField(default=0)),
                ('amount_storage_tanks', models.IntegerField(default=0)),
                ('amount_pumps', models.IntegerField(default=0)),
                ('storage_tank_max_capacity', models.IntegerField(default=0)),
                ('storage_tank_consumed_capacity', models.IntegerField(default=0)),
                ('current_drilling_depth', models.IntegerField(default=0)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='core.OilFieldStatus')),
            ],
            options={
                'db_table': 'core_oil_fields',
            },
        ),
    ]
